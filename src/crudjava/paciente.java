
package crudjava;

import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class paciente extends javax.swing.JFrame {

    conexion con1 = new conexion ();
    Connection cn=con1.conectar();
    //DefaultTableModel model;
    //Statement st;//hace la ejecucion en la base de datos
    //ResultSet rs;//trae el resultado que se hace en la base de datos
    
    public paciente() {
        initComponents();
        mostrar();
        //listar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaPaciente = new RSMaterialComponent.RSTableMetro();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        documento = new javax.swing.JTextField();
        nombres = new javax.swing.JTextField();
        apellidos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        municipio = new javax.swing.JTextField();
        postal = new javax.swing.JTextField();
        telefono = new javax.swing.JTextField();
        nuevo = new javax.swing.JButton();
        insertar = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nacimiento = new javax.swing.JTextField();
        direccion = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        departamento = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TablaPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaPacienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaPaciente);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1081, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Numero Documento");

        jLabel2.setText("Nombres");

        jLabel3.setText("Apellidos");

        jLabel4.setText("Municipio");

        jLabel5.setText("Codigo Postal");

        jLabel6.setText("Telefono");

        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        insertar.setText("Insertar");
        insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarActionPerformed(evt);
            }
        });

        actualizar.setText("Actualizar");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jLabel7.setText("Direcci√≥n");

        jLabel8.setText("Fecha Nacimiento");

        jLabel9.setText("Departamento");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nuevo)
                .addGap(26, 26, 26)
                .addComponent(insertar)
                .addGap(30, 30, 30)
                .addComponent(actualizar)
                .addGap(32, 32, 32)
                .addComponent(eliminar)
                .addGap(272, 272, 272))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(departamento, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(direccion)
                    .addComponent(municipio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(nacimiento))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(postal, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(116, 116, 116))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(postal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(departamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(nacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo)
                    .addComponent(insertar)
                    .addComponent(actualizar)
                    .addComponent(eliminar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        
        nuevo();
    }//GEN-LAST:event_nuevoActionPerformed

    private void insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarActionPerformed
        insertar();
        mostrar();
        //agregar();
        //listar();
        nuevo();
    }//GEN-LAST:event_insertarActionPerformed

    private void TablaPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPacienteMouseClicked
        int filaSeleccionada = TablaPaciente.rowAtPoint(evt.getPoint());
        documento.setText(TablaPaciente.getValueAt(filaSeleccionada, 1).toString());
        nombres.setText(TablaPaciente.getValueAt(filaSeleccionada, 2).toString());
        apellidos.setText(TablaPaciente.getValueAt(filaSeleccionada, 3).toString());
        direccion.setText(TablaPaciente.getValueAt(filaSeleccionada, 4).toString());
        departamento.setText(TablaPaciente.getValueAt(filaSeleccionada, 5).toString());
        municipio.setText(TablaPaciente.getValueAt(filaSeleccionada, 6).toString());
        postal.setText(TablaPaciente.getValueAt(filaSeleccionada, 7).toString());
        telefono.setText(TablaPaciente.getValueAt(filaSeleccionada, 8).toString());
        nacimiento.setText(TablaPaciente.getValueAt(filaSeleccionada, 9).toString());
    }//GEN-LAST:event_TablaPacienteMouseClicked

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        actualizar();
        nuevo();
        mostrar();
    }//GEN-LAST:event_actualizarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        eliminar();
        mostrar();
        nuevo();
    }//GEN-LAST:event_eliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new paciente().setVisible(true);
            }
        });
    }
    
    /*void listar (){
        String sql = "select * from ingreso";
        try{
            cn = con1.conectar();
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            //se declara un objeto array de 9 campos
            Object[] pac = new Object[9];
            model = (DefaultTableModel)TablaPaciente.getModel();
            while(rs.next()){
                pac[0] = rs.getInt("num_documento");
                pac[1] = rs.getString("nombres");
                pac[2] = rs.getString("apellidos");
                pac[3] = rs.getString("direccion");
                pac[4] = rs.getString("departamento");
                pac[5] = rs.getString("municipio");
                pac[6] = rs.getString("cod_postal");
                pac[7] = rs.getString("telefono");
                pac[8] = rs.getDate("fecha_nacimiento");
                model.addRow(pac);
            }
            TablaPaciente.setModel(model);//pinta o llena la tabla en la vista
        }catch (Exception e){
            
        }        
    }*/
    /*void agregar(){
        String doc = documento.getText();//envia el texto que este en nombres y lo guarda en nom//nombres apellidos y correo son los nombres que se le ponen en en texfield        
        String nom  = nombres.getText();
        String ape  = apellidos.getText();
        String dir  = direccion.getText();
        String dep  = departamento.getText();
        String mun  = municipio.getText();
        String pos  = postal.getText();
        String tel  = telefono.getText();
        String fec  = nacimiento.getText();
        
        try{
            if(doc.equals("") ||nom.equals("")||ape.equals("")||dir.equals("")||dep.equals("")||mun.equals("")||pos.equals("")||tel.equals("")||fec.equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
                limpiar(model);
            }else{
                
                String sql="insert into paciente(num_documento, nombres, apellidos, direccion, departamento, municipio, cod_postal, telefono, fecha_nacimiento) values ('"+doc+"','"+nom+"','"+ape+"','"+dir+"','"+dep+"','"+mun+"','"+pos+"''"+tel+"','"+fec+"')";
                cn=con1.conectar();
                st=cn.createStatement();
                st.executeUpdate(sql);//ejecuta la insersion de los datos en la tabla y en la bd
                JOptionPane.showMessageDialog(null,"Se insertaron los datos");
                limpiar(model);
            }
        }catch(Exception e){
        
        }
        try{
            String sql="insert into paciente(num_documento,nombres,apellidos,direccion,departamento,municipio,cod_postal,telefono,fecha_nacimiento) values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement pst=cn.prepareStatement(sql);
            
            pst.setString(1, documento.getText());
            pst.setString(2, nombres.getText());
            pst.setString(3, apellidos.getText());
            pst.setString(4, direccion.getText());
            pst.setString(5, departamento.getText());
            pst.setString(6, municipio.getText());
            pst.setString(7, postal.getText());
            pst.setString(8, telefono.getText());
            pst.setString(9, nacimiento.getText());
            
            pst.execute();
            JOptionPane.showMessageDialog(null,"Paciente ingresado");
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"Error de paciente ingresado" + e.getMessage());
        }
    }
    void limpiar(DefaultTableModel model){
        for(int i=0; i<=TablaPaciente.getRowCount(); i++){
            model.removeRow(i);
            i = i-1;
        }
    }*/
    void nuevo(){
        documento.setText("");//estos son los nombres que pusimos en el texfield
        nombres.setText("");
        apellidos.setText("");
        direccion.setText("");
        departamento.setText("");
        municipio.setText("");
        postal.setText("");
        telefono.setText("");
        nacimiento.setText("");
        documento.requestFocus();
        
    }
    
    public void insertar(){
        
        try{
            String SQL="insert into paciente(num_documento,nombres,apellidos,direccion,departamento,municipio,cod_postal,telefono,fecha_nacimiento) values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement pst=cn.clientPrepareStatement(SQL);
            
            pst.setString(1, documento.getText());
            pst.setString(2, nombres.getText());
            pst.setString(3, apellidos.getText());
            pst.setString(4, direccion.getText());
            pst.setString(5, departamento.getText());
            pst.setString(6, municipio.getText());
            pst.setString(7, postal.getText());
            pst.setString(8, telefono.getText());
            pst.setString(9, nacimiento.getText());
            if(documento.equals("") ||nombres.equals("")||apellidos.equals("")||direccion.equals("")||departamento.equals("")||municipio.equals("")||postal.equals("")||telefono.equals("")||nacimiento.equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
            }else{
                pst.execute();            
                JOptionPane.showMessageDialog(null,"Paciente ingresado");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"error de registro de paciente " +e.getMessage());
        }
    }
    
    public void mostrar() {
        String[] titulos={"Id","Documento","Nombres","Apellidos","Direccion","Departamento","Municipio","Codigo Postal","Telefono","Fecha Nacimiento"};
        String[] registros = new String[10];
        
        DefaultTableModel modelo= new DefaultTableModel(null, titulos);
        
        String SQL = "select * from paciente";
        
        try{
            Statement st=cn.createStatement();//hace la ejecucion en la base de datos
            ResultSet rs=st.executeQuery(SQL);//trae el resultado que se hace en la base de datos
            while(rs.next()){
                registros[0] = rs.getString("id_paciente");//columnas de la bd
                registros[1] = rs.getString("num_documento");
                registros[2] = rs.getString("nombres");
                registros[3] = rs.getString("apellidos");
                registros[4] = rs.getString("direccion");
                registros[5] = rs.getString("departamento");
                registros[6] = rs.getString("municipio");
                registros[7] = rs.getString("cod_postal");
                registros[8] = rs.getString("telefono");
                registros[9] = rs.getString("fecha_nacimiento");
                modelo.addRow(registros);
            }
            TablaPaciente.setModel(modelo);//pinta o llena la tabla en la vista
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"error al mostrar datos " +e.getMessage());
        }
        
    }
    
    public void actualizar(){
        
        try{
            String SQL="update paciente set num_documento=?,nombres=?,apellidos=?,direccion=?,departamento=?,municipio=?,cod_postal=?,telefono=?,fecha_nacimiento=? where id_paciente=?";
            int filaSeleccionada=TablaPaciente.getSelectedRow();
            String dao=(String)TablaPaciente.getValueAt(filaSeleccionada, 0);
            PreparedStatement pst=cn.clientPrepareStatement(SQL);
            
            pst.setString(1, documento.getText());
            pst.setString(2, nombres.getText());
            pst.setString(3, apellidos.getText());
            pst.setString(4, direccion.getText());
            pst.setString(5, departamento.getText());
            pst.setString(6, municipio.getText());
            pst.setString(7, postal.getText());
            pst.setString(8, telefono.getText());
            pst.setString(9, nacimiento.getText());
            pst.setString(10, dao);
            if(documento.equals("") ||nombres.equals("")||apellidos.equals("")||direccion.equals("")||departamento.equals("")||municipio.equals("")||postal.equals("")||telefono.equals("")||nacimiento.equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
            }else{
                pst.execute();            
                JOptionPane.showMessageDialog(null,"Paciente actualizado");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"error de actualizaci√≥n de paciente " +e.getMessage());
        }
    }
    
    public void eliminar(){
        int filaSeleccionada=TablaPaciente.getSelectedRow();
        
        try{
            String SQL="delete from paciente where id_paciente="+TablaPaciente.getValueAt(filaSeleccionada, 0);
            
            Statement st=cn.createStatement();
            int n=st.executeUpdate(SQL);
            if(n>=0){
                JOptionPane.showMessageDialog(null,"Registro eliminado " );
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"error de eliminaci√≥n de paciente " +e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSTableMetro TablaPaciente;
    private javax.swing.JButton actualizar;
    private javax.swing.JTextField apellidos;
    private javax.swing.JTextField departamento;
    private javax.swing.JTextField direccion;
    private javax.swing.JTextField documento;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton insertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField municipio;
    private javax.swing.JTextField nacimiento;
    private javax.swing.JTextField nombres;
    private javax.swing.JButton nuevo;
    private javax.swing.JTextField postal;
    private javax.swing.JTextField telefono;
    // End of variables declaration//GEN-END:variables
}
