
package crudjava;


import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ingreso extends javax.swing.JFrame {

    conexion con1 = new conexion ();
    Connection cn=con1.conectar();
    //DefaultTableModel model;
    //Statement st;//hace la ejecucion en la base de datos
    //ResultSet rs;//trae el resultado que se hace en la base de datos
    
    public ingreso() {
        initComponents();
        mostrar();
        //listar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaIngreso = new RSMaterialComponent.RSTableMetro();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        codigo = new javax.swing.JTextField();
        habitacion = new javax.swing.JTextField();
        cama = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fecha = new javax.swing.JTextField();
        documento = new javax.swing.JTextField();
        medico = new javax.swing.JTextField();
        nuevo = new javax.swing.JButton();
        insertar = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TablaIngreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null", "null", "null", "null", "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaIngreso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaIngresoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaIngreso);
        if (TablaIngreso.getColumnModel().getColumnCount() > 0) {
            TablaIngreso.getColumnModel().getColumn(8).setMinWidth(0);
            TablaIngreso.getColumnModel().getColumn(8).setPreferredWidth(0);
            TablaIngreso.getColumnModel().getColumn(8).setMaxWidth(0);
            TablaIngreso.getColumnModel().getColumn(9).setMinWidth(0);
            TablaIngreso.getColumnModel().getColumn(9).setPreferredWidth(0);
            TablaIngreso.getColumnModel().getColumn(9).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Codigo");

        jLabel2.setText("Habitaci√≥n");

        jLabel3.setText("Cama");

        codigo.setEditable(false);
        codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha Ingreso");

        jLabel5.setText("Documento Paciente");

        jLabel6.setText("Medico");

        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        medico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicoActionPerformed(evt);
            }
        });

        nuevo.setText("nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        insertar.setText("Insertar");
        insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarActionPerformed(evt);
            }
        });

        actualizar.setText("Actualizar");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(codigo)
                    .addComponent(habitacion)
                    .addComponent(cama, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(131, 131, 131)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(medico, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(documento)
                    .addComponent(fecha))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(301, Short.MAX_VALUE)
                .addComponent(nuevo)
                .addGap(26, 26, 26)
                .addComponent(insertar)
                .addGap(30, 30, 30)
                .addComponent(actualizar)
                .addGap(32, 32, 32)
                .addComponent(eliminar)
                .addGap(272, 272, 272))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(habitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo)
                    .addComponent(insertar)
                    .addComponent(actualizar)
                    .addComponent(eliminar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoActionPerformed

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaActionPerformed

    private void medicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medicoActionPerformed

    private void insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarActionPerformed
        insertar();
        mostrar();
        //agregar();
        //listar();
        nuevo();
    }//GEN-LAST:event_insertarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        
        nuevo();
    }//GEN-LAST:event_nuevoActionPerformed

    private void TablaIngresoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaIngresoMouseClicked
        int filaSeleccionada = TablaIngreso.rowAtPoint(evt.getPoint());
        codigo.setText(TablaIngreso.getValueAt(filaSeleccionada, 0).toString());
        habitacion.setText(TablaIngreso.getValueAt(filaSeleccionada, 1).toString());
        cama.setText(TablaIngreso.getValueAt(filaSeleccionada, 2).toString());
        fecha.setText(TablaIngreso.getValueAt(filaSeleccionada, 3).toString());
        documento.setText(TablaIngreso.getValueAt(filaSeleccionada, 8).toString());
        medico.setText(TablaIngreso.getValueAt(filaSeleccionada, 9).toString());
    }//GEN-LAST:event_TablaIngresoMouseClicked

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        actualizar();
        nuevo();
        mostrar();
    }//GEN-LAST:event_actualizarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        eliminar();
        mostrar();
        nuevo();
    }//GEN-LAST:event_eliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ingreso().setVisible(true);
            }
        });
    }
    
    
    
    /*void listar (){
        String sql = "select * from ingreso";
        try{
            cn = con1.conectar();
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            //se declara un objeto array de 4 campos
            Object[] ing = new Object[6];
            model = (DefaultTableModel)TablaIngreso.getModel();
            while(rs.next()){
                ing[0] = rs.getInt("cod_ingreso");
                ing[1] = rs.getInt("num_habitacion");
                ing[2] = rs.getInt("num_cama");
                ing[3] = rs.getString("fecha_ingreso");
                ing[4] = rs.getDouble("num_documento");
                ing[5] = rs.getInt("cod_medico");
                model.addRow(ing);
            }
            TablaIngreso.setModel(model);//pinta o llena la tabla en la vista
        }catch (Exception e){
            
        }        
    }
    void agregar(){
        String cod  = codigo.getText();//envia el texto que este en nombres y lo guarda en nom//nombres apellidos y correo son los nombres que se le ponen en en texfield
        String hab  = habitacion.getText();
        String cam  = cama.getText();
        String fec  = fecha.getText();
        String doc  = documento.getText();
        String med  = medico.getText();
        
        try{
            if(cod.equals("")||hab.equals("")||cam.equals("")||fec.equals("")||doc.equals("")||med.equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
                limpiar(model);
            }else{
                String sql="insert into ingreso(cod_ingreso, num_habitacion, num_cama, fecha_ingreso, num_documento, cod_medico) values ('"+cod+"','"+hab+"','"+cam+"','"+fec+"','"+doc+"','"+med+"')";
                cn=con1.conectar();
                st=cn.createStatement();
                st.executeUpdate(sql);//ejecuta la insersion de los datos en la tabla y en la bd
                JOptionPane.showMessageDialog(null,"Se insertaron los datos");
                limpiar(model);
            }
        }catch(Exception e){
        
        }
    }
    void limpiar(DefaultTableModel model){
        for(int i=0; i<=TablaIngreso.getRowCount(); i++){
            model.removeRow(i);
            i = i-1;
        }
    }*/
    void nuevo(){
        codigo.setText("");//estos son los nombres que pusimos en el texfield
        habitacion.setText("");
        cama.setText("");
        fecha.setText("");
        documento.setText("");
        medico.setText("");
        codigo.requestFocus();
    }
    
    public void insertar(){
        
        try{
            String SQL="insert into ingreso(num_habitacion,num_cama,fecha_ingreso,num_documento,cod_medico) values (?,?,?,?,?)";
            PreparedStatement pst=cn.clientPrepareStatement(SQL);
            
            //pst.setInt(1, Integer.parseInt(codigo.getText()));
            pst.setString(1, habitacion.getText());
            pst.setString(2, cama.getText());
            pst.setString(3, fecha.getText());
            pst.setInt(4, Integer.parseInt(documento.getText()));
            pst.setInt(5, Integer.parseInt(medico.getText()));
            
            if(habitacion.equals("")||cama.equals("")||fecha.equals("")||documento.getText().equals("")||medico.getText().equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
            
            }else {
                pst.execute();            
                JOptionPane.showMessageDialog(null,"Ingreso de paciente a habitacion");
            }
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"error de ingreso a la habitaci√≥n " +e.getMessage());
        }
    }
    public void mostrar() {
        String[] titulos={"Codigo Ingreso","Habitacion","Cama","Fecha Ingreso","Nombre Paciente","Apellidos Paciente","Nombre Medico","Apellidos Medico","Id Paciente","Cod Medico"};
        String[] registros = new String[10];
        
        DefaultTableModel modelo= new DefaultTableModel(null, titulos);
        
        String SQL = "select ingreso.cod_ingreso, ingreso.num_habitacion, ingreso.num_cama, ingreso.fecha_ingreso, paciente.nombres, paciente.apellidos, medico.nombres, medico.apellidos, medico.cod_medico, paciente.id_paciente\n" +
"from ingreso left join paciente on paciente.id_paciente=ingreso.num_documento left join medico on ingreso.cod_medico=medico.cod_medico";
        
        try{
            Statement st=cn.createStatement();//hace la ejecucion en la base de datos
            ResultSet rs=st.executeQuery(SQL);//trae el resultado que se hace en la base de datos
            while(rs.next()){
                registros[0] = rs.getString("cod_ingreso");//columnas de la bd
                registros[1] = rs.getString("num_habitacion");
                registros[2] = rs.getString("num_cama");
                registros[3] = rs.getString("fecha_ingreso");
                registros[4] = rs.getString("paciente.nombres");
                registros[5] = rs.getString("paciente.apellidos");
                registros[6] = rs.getString("medico.nombres");
                registros[7] = rs.getString("medico.apellidos");
                registros[8] = rs.getString("paciente.id_paciente");
                registros[9] = rs.getString("medico.cod_medico");
                modelo.addRow(registros);
            }
            
            TablaIngreso.setModel(modelo);//pinta o llena la tabla en la vista
            TablaIngreso.getColumnModel().getColumn(8).setMaxWidth(0);
            TablaIngreso.getColumnModel().getColumn(8).setMinWidth(0);            
            TablaIngreso.getColumnModel().getColumn(8).setPreferredWidth(0);
            TablaIngreso.getTableHeader().getColumnModel().getColumn(8).setMaxWidth(0);
            TablaIngreso.getTableHeader().getColumnModel().getColumn(8).setMinWidth(0);
            TablaIngreso.getColumnModel().getColumn(9).setMaxWidth(0);
            TablaIngreso.getColumnModel().getColumn(9).setMinWidth(0);            
            TablaIngreso.getColumnModel().getColumn(9).setPreferredWidth(0);
            TablaIngreso.getTableHeader().getColumnModel().getColumn(9).setMaxWidth(0);
            TablaIngreso.getTableHeader().getColumnModel().getColumn(9).setMinWidth(0);
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"error al mostrar datos " +e.getMessage());
        }        
    }
    
    public void actualizar(){
        
        try{
            String SQL="update ingreso set num_habitacion=?,num_cama=?,fecha_ingreso=?,num_documento=?,cod_medico=? where cod_ingreso=?";
            int filaSeleccionada=TablaIngreso.getSelectedRow();
            String dao=(String)TablaIngreso.getValueAt(filaSeleccionada, 0);
            PreparedStatement pst=cn.clientPrepareStatement(SQL);
            
            //pst.setInt(1, Integer.parseInt(codigo.getText()));
            pst.setString(1, habitacion.getText());
            pst.setString(2, cama.getText());
            pst.setString(3, fecha.getText());
            pst.setInt(4, Integer.parseInt(documento.getText()));
            pst.setInt(5, Integer.parseInt(medico.getText()));
            pst.setString(6, dao);
            
            if(habitacion.equals("")||cama.equals("")||fecha.equals("")||documento.getText().equals("")||medico.getText().equals("")){
                JOptionPane.showMessageDialog(null,"No puede existir campos vacios");
            
            }else {
                pst.execute();            
                JOptionPane.showMessageDialog(null,"Actualizaci√≥n de ingreso");
            }
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"error de actualizaci√≥n de ingreso " +e.getMessage());
        }
    }
    
    public void eliminar(){
        int filaSeleccionada=TablaIngreso.getSelectedRow();
        
        try{
            String SQL="delete from ingreso where cod_ingreso="+TablaIngreso.getValueAt(filaSeleccionada, 0);
            
            Statement st=cn.createStatement();
            int n=st.executeUpdate(SQL);
            if(n>=0){
                JOptionPane.showMessageDialog(null,"Registro eliminado " );
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"error de eliminaci√≥n de ingreso " +e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSTableMetro TablaIngreso;
    private javax.swing.JButton actualizar;
    private javax.swing.JTextField cama;
    private javax.swing.JTextField codigo;
    private javax.swing.JTextField documento;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField fecha;
    private javax.swing.JTextField habitacion;
    private javax.swing.JButton insertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField medico;
    private javax.swing.JButton nuevo;
    // End of variables declaration//GEN-END:variables
}
